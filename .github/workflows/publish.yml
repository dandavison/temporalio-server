name: Publish Python Package to PyPI

on:
  release:
    types: [published]

permissions:
  # Needed for uv publish OIDC authentication
  id-token: write

jobs:
  build_sdist_and_publish:
    name: Build sdist and publish
    runs-on: ubuntu-latest # sdist is platform-independent
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v5

      # Verify version here too for completeness, though not strictly necessary
      - name: Verify Git tag matches pyproject.toml version
        run: python .github/scripts/check_version.py

      - name: Build source distribution (sdist)
        run: uv build --sdist -o dist/
        # This should NOT trigger the build hook

      - name: Publish sdist to PyPI
        run: uv publish dist/*.tar.gz
        # uv will use OIDC via the id-token permission

  build_wheels_and_publish:
    name: Build wheels and publish on ${{ matrix.os }}
    needs: build_sdist_and_publish # Optional: run after sdist
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure all platforms complete even if one fails
      fail-fast: false
      matrix:
        # Platforms to build native wheels for
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v5

      # No version check needed here if sdist job does it

      - name: Build wheel distribution (non-linux)
        if: matrix.os != 'ubuntu-latest'
        run: uv build --wheel -o dist/

      - name: Publish wheel (non-linux)
        if: matrix.os != 'ubuntu-latest'
        run: uv publish dist/*.whl

      # --- Linux Build (inside manylinux container) ---
      - name: Build manylinux wheel (linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: docker://quay.io/pypa/manylinux_2_28_x86_64
        with:
          entrypoint: /bin/bash
          args: >
            -ec '
            echo "Inside container..."
            export PATH="/opt/python/cp311-cp311/bin:$PATH"
            echo "Installing uv..."
            curl -LsSf https://astral.sh/uv/install.sh | sh
            source /root/.cargo/env
            echo "Checking uv version:"
            uv --version
            echo "Building wheel..."
            cd /github/workspace
            uv build --wheel -o dist/
            echo "Listing built wheel:"
            ls dist/
            echo "Publishing wheel..."
            # Need to pass the OIDC token into the container
            # uv publish should pick up GITHUB_ACTIONS and ID_TOKEN automatically
            export GITHUB_ACTIONS=true
            export ACTIONS_ID_TOKEN_REQUEST_URL=$ACTIONS_ID_TOKEN_REQUEST_URL
            export ACTIONS_ID_TOKEN_REQUEST_TOKEN=$ACTIONS_ID_TOKEN_REQUEST_TOKEN
            uv publish dist/*.whl
            echo "Publish command finished."
            '
        env:
          # Pass OIDC environment variables needed by uv publish into the container
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}
          ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}

      # Removed original Publish wheel step for linux 